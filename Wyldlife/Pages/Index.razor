@page "/{Distance:int}"
@page "/"
@page "/{Distance:int}/{query}"

@inject IJSRuntime jsRuntime
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@inject Wyldlife.Services.LocationService locationservice
@using Wyldlife.Models
@inject NavigationManager NavManager
@inject Wyldlife.Services.ImageService imageService

<h1>Home</h1>

<div class="form-inline">
    <label class="my-1 mr-2" for="distancelabel">Show me locations within: </label>
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @distancedropdown Miles
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <a class="dropdown-item" href="#" @onclick="(e => { ChangeDistance(5); })">5 Miles</a>
            <a class="dropdown-item" href="#" @onclick="(e => { ChangeDistance(10); })">10 Miles</a>
            <a class="dropdown-item" href="#" @onclick="(e => { ChangeDistance(25); })">25 Miles</a>
            <a class="dropdown-item" href="#" @onclick="(e => { ChangeDistance(50); })">50 Miles</a>
            <a class="dropdown-item" href="#" @onclick="(e => { ChangeDistance(100); })">100 Miles</a>
            <a class="dropdown-item" href="#" @onclick="(e => { ChangeDistance(1); })">Unlimited Miles</a>


        </div>
    </div>
    <div class="form-check mb-2 mr-sm-2" style="padding-left:10px; padding-top:10px">
        <input class="form-control mr-sm-2" style="padding-left:5px" type="search" placeholder="Search by location name" aria-label="Search" @bind="query">
        <button class="btn btn-outline-success my-2 my-sm-0" @onclick="search">Search</button>
    </div>

</div>


<br />
<br />
@for (int i = 0; i < locations.Count; i++)
{
    var image = imageService.getImages(locations[i].Id).FirstOrDefault();
    string imgSrc = "";
    if(image != null)
    {
        var base64 = Convert.ToBase64String(image);
        imgSrc = String.Format("data:image/gif;base64,{0}", base64);
    }

    <div class="row">
        <div class="col-sm-6">
            <div class="card h-100" style="width: 75%">
                @if (imgSrc != "")
                {
                    <img class="card-img-top" style="width:100%; height:15vw; object-fit:cover" src="@imgSrc" alt="Card image cap" />
                }
                <div class="card-body">
                    <h5 class="card-title">@locations[i].Title</h5>
                    <p class="card-text">@locations[i].Description</p>
                    <a href="/Location/@locations[i].Id" class="stretched-link"></a>
                </div>
            </div>
        </div>
        @if (i + 1 < locations.Count)
        {
            i++;
            image = imageService.getImages(locations[i].Id).FirstOrDefault();
            imgSrc = "";
            if (image != null)
            {
                var base64 = Convert.ToBase64String(image);
                imgSrc = String.Format("data:image/gif;base64,{0}", base64);
            }
            <div class="col-sm-6">
                <div class="card h-100" style="width: 75%">
                    @if (imgSrc != "")
                    {
                        <img class="card-img-top" style="width:100%; height:15vw; object-fit:cover" src="@imgSrc" alt="Card image cap" />
                    }
                    <div class="card-body">
                        <h5 class="card-title">@locations[i].Title</h5>
                        <p class="card-text">@locations[i].Description</p>
                        <a href="/Location/@locations[i].Id" class="stretched-link"></a>
                    </div>
                </div>
            </div>
        }

    </div>
    <br />
}



@code{

    public List<Location> locations = new List<Location>();

    [Parameter]
    public int? Distance { get; set; }

    [Parameter]
    public string query { get; set; }

    Tuple<double, double> coords { get; set; }

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition currentPosition;

    public string distancedropdown { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            var window = await jsRuntime.Window();
            var navigator = await window.Navigator();
            geolocationWrapper = navigator.Geolocation;
            await GetLocation();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Distance = Distance ?? 5;
        distancedropdown = "5";
        query = query ?? string.Empty;
        coords = Tuple.Create(0.0, 0.0);
    }

    public async Task GetLocation()
    {
        currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)

        })).Location;
        coords = Tuple.Create(currentPosition.Coords.Latitude, currentPosition.Coords.Longitude);
        locations = locationservice.GetLocationsByDistance(coords, Distance.GetValueOrDefault());
    }

    public void ChangeDistance(int x)
    {
        if(x==1)
        {
            locations = locationservice.GetLocations();
            distancedropdown = "Unlimited";
        }
        else
        {
            Distance = x;
            distancedropdown = x.ToString();
            locations = locationservice.GetLocationsByDistance(coords, Distance.GetValueOrDefault());
        }
    }

    public void search()
    {
        if(distancedropdown == "Unlimited")
        {
            locations = locationservice.GetLocationsBySearch(query);
        }
        else
        {
            locations = locationservice.GetLocationsBySearch(query, coords, Distance.GetValueOrDefault());
        }
        query = string.Empty;
    }

}