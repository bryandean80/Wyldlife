@page "/Location/{locationid:guid}"
@inject IJSRuntime jsRuntime
@using Wyldlife.Models
@using System.IO
@inject Wyldlife.Services.LocationService locationservice
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject Wyldlife.Services.ImageService imageService
@using System.Collections.Generic;
@using System.Threading;
@using System.Threading.Tasks;
@using System.Text


<h3>@locationservice.GetLocations().First(x => x.Id == locationid).Title </h3>


<div id="carouselExampleIndicators" class="carousel slide " data-ride="carousel" role="listbox"  style="width:500px; height:auto;">
    <div class="carousel-inner" role="listbox" style=" width:500px; height:auto; max-height:700px">
        <ol class="carousel-indicators">
            @for (int i = 0; i < images.Count(); i++)
            {

                if (i == 0)
                {
                    <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                }
                else
                {
                    <li data-target="#carouselExampleIndicators" data-slide-to=@i></li>
                }
            }
        </ol>
        @for(int i=0; i < images.Count(); i++)
        {
            var base64 = Convert.ToBase64String(images[i]);
            var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
            if (i==0)
            {
                <div class="carousel-item active">
                    <img class="d-block w-100" src="@imgSrc">
                </div>
            }
            else
            {
                <div class="carousel-item">
                    <img class="d-block w-100"  src="@imgSrc" >
                </div>
            }
        }

    </div>
    <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>
<br /><br />
<div class="card" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">Description</h5>
        <p class="card-text">@locationservice.GetLocations().First(x => x.Id == locationid).Description</p>
    </div>
</div>
<br />
<div class="card" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">Notes</h5>
        <p class="card-text">@locationservice.GetLocations().First(x => x.Id == locationid).Notes</p>
    </div>
</div>
<br />
<br />

<button class="btn btn-primary" @onclick="OpenLocInMaps">Open Location in Google Maps</button>
<br />
<br />

<AuthorizeView>
    <Authorized>
        <p>
            <label>
                Add an Image:
                <InputFile OnChange="@LoadFiles" />
            </label>
        </p>

        <p>@exceptionMessage</p>

        @if (isLoading)
        {
        <p>Loading...</p>}
    </Authorized>
</AuthorizeView>

@for (int i = 0; i < 5; i++)
{
    if (i < rating)
    {
<span class="fa fa-star checked"></span> }
else
{
<span class="fa fa-star"></span>}
}
<label> @numratings ratings</label>
<br />
<AuthorizeView>
    <Authorized>
        <!-- Button trigger modal -->
        @if (locationservice.GetReviews(locationid).Exists(x => x.Author == currentuser))
        {
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
    Change your review
</button> }
else
{
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
    Add a Review
</button>}


        <!-- Modal -->
        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Add a Review</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Rating</p>
                        <div class="rating">
                            <input type="radio" name="rating" value="5" id="5"><label for="5" @onclick="(e => review.Rating = 5)">☆</label>
                            <input type="radio" name="rating" value="4" id="4"><label for="4" @onclick="(e => review.Rating = 4)">☆</label>
                            <input type="radio" name="rating" value="3" id="3"><label for="3" @onclick="(e => review.Rating = 3)">☆</label>
                            <input type="radio" name="rating" value="2" id="2"><label for="2" @onclick="(e => review.Rating = 2)">☆</label>
                            <input type="radio" name="rating" value="1" id="1"><label for="1" @onclick="(e => review.Rating = 1)">☆</label>
                        </div>
                        <p>Review (Optional)</p>
                        <div class="input-group">
                            <textarea maxlength="140" class="form-control" @bind="review.ReviewText"></textarea>
                        </div>
                    </div>
                    <form class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary" data-dismiss="modal" @onclick="addReview">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div>To add a review <a href="/Identity/Account/Register">Make an Account</a> or <a href="/Identity/Account/Login">Login</a></div>
    </NotAuthorized>
</AuthorizeView>
<br />
<br />
<p>
    Posted By: @locationservice.GetLocations().First(x => x.Id == locationid).Author
</p>
<br />
<h3>Reviews</h3>
@foreach (Review rev in locationservice.GetReviews(locationid))
{
    if (rev.ReviewText == string.Empty)
    {
        continue;
    }
<div class="card" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">@rev.Author</h5>
        @for (int i = 0; i < 5; i++)
        {
            if (i < rev.Rating)
            {
<span class="fa fa-star checked"></span> }
else
{
<span class="fa fa-star"></span>}
}
        <p class="card-text">@rev.ReviewText</p>
    </div>
</div>
                <br />}

@code { [Parameter]
    public Guid locationid { get; set; }

    public int numratings { get; set; }
    public string currentuser { get; set; }
    public int rating { get; set; }
    public Review review = new Review();
    List<byte[]> images = new List<byte[]>();

    public async Task OpenLocInMaps()
    {
        string lat = locationservice.GetLocations().First(x => x.Id == locationid).Coords.Item1.ToString();
        string lon = locationservice.GetLocations().First(x => x.Id == locationid).Coords.Item2.ToString();
        string url = "https://www.google.com/maps/search/?api=1&query=" + lat + "," + lon;
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetRatings();
        images = imageService.getImages(locationid);
    }

    public void GetRatings()
    {
        rating = locationservice.GetRating(locationid).Item1;
        numratings = locationservice.GetRating(locationid).Item2;
    }

    private async Task GetCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentuser = user.Identity.Name;
    }

    public void addReview()
    {
        review.Author = currentuser;
        review.LocationId = locationid;
        locationservice.AddReview(review);
        GetRatings();
    }

    private Dictionary<IBrowserFile, string> loadedFiles =
        new Dictionary<IBrowserFile, string>();
    private long maxFileSize = 524288000000000;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    string exceptionMessage;

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        exceptionMessage = string.Empty;

        try
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                using var reader =
                    new StreamReader(file.OpenReadStream(maxFileSize));
                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);
                    byte[] barray = memoryStream.ToArray();
                    imageService.AddImage(locationid, currentuser, barray);
                    
                }
            }
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }

        isLoading = false;
    } }
