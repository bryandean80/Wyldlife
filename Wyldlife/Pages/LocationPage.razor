@page "/Location/{locationid:guid}"
@inject IJSRuntime jsRuntime
@using Wyldlife.Models
@using System.IO
@inject Wyldlife.Services.LocationService locationservice
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject Wyldlife.Services.ImageService imageService
@using System.Collections.Generic;
@using System.Threading;
@using System.Threading.Tasks;
@using System.Text
@inject NavigationManager NavManager
@inject Wyldlife.Services.WeatherService weatherService 

<center>
    @{ var img = imageService.getStories().FirstOrDefault(x => x.locationId == locationid);
                    if (img != null)
                    {
                        var base64 = Convert.ToBase64String(img.image);
                        var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                        <div style="padding-right:10px; display:inline">
                            <img type="button" class="img-fluid" src=@imgSrc style="border-radius: 50%; height:10vmin; width:10vmin;" data-toggle="modal" data-target="#StoryModal" @onclick="() => showStory(locationid)" />
                        </div>
                    } }


    <h3 style="display:inline; padding-top:5px">@locationservice.GetLocations().First(x => x.Id == locationid).Title </h3>

    <!-- Modal -->
    <div class="modal fade" id="StoryModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="max-width:100%; height:100vh" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">@modalLoc.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="StoryIndicators" class="carousel slide " data-ride="carousel" role="listbox" style="max-width:75vmin; max-height:75vmin">
                        <div class="carousel-inner" role="listbox" style="width:75vmin; height:75vmin">
                            <ol class="carousel-indicators">

                                @for (int i = 0; i < storyImgs.Count(); i++)
                                {
                                    if (i == 0)
                                    {
                    <li data-target="#StoryIndicators" data-slide-to="0" class="active"></li>
 }
                else
                {
<li data-target="#StoryIndicators" data-slide-to=@i></li>
}
}
                            </ol>

                            @for (int i = 0; i < storyImgs.Count(); i++)
                            {
                                var base64 = Convert.ToBase64String(storyImgs[i].image);
                                var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                                if (i == 0)
                                {
                <div class="carousel-item active">
                    <img style="width:75vmin; height:75vmin; object-fit:contain; object-position: center center;" class="d-block w-100" src="@imgSrc">
                </div> }
            else
            {
<div class="carousel-item">
    <img style="width:75vmin; height:75vmin; object-fit:contain; object-position: center center;" class="d-block w-100" src="@imgSrc">
</div>}
}

                        </div>
                        <a class="carousel-control-prev" href="#StoryIndicators" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#StoryIndicators" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
                <form class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </form>
            </div>
        </div>
    </div>


    <div id="carouselExampleIndicators" class="carousel slide " data-ride="carousel" role="listbox" style="max-width:75vmin; max-height:75vmin">
        <div class="carousel-inner" role="listbox" style="width:75vmin; height:75vmin">
            <ol class="carousel-indicators">
                @for (int i = 0; i < images.Count(); i++)
                {

                    if (i == 0)
                    {
    <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li> }
                    else
                    {
    <li data-target="#carouselExampleIndicators" data-slide-to=@i></li>}
                }
            </ol>
            @for (int i = 0; i < images.Count(); i++)
            {
                var base64 = Convert.ToBase64String(images[i]);
                var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                if (i == 0)
                {
<div class="carousel-item active">
    <img style="width:75vmin; height:75vmin; object-fit:contain; object-position: center center;" class="d-block w-100" src="@imgSrc">
</div> }
                else
                {
<div class="carousel-item">
    <img style="width:75vmin; height:75vmin; object-fit:contain; object-position: center center;" class="d-block w-100" src="@imgSrc">
</div>                }
            }

        </div>
        <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>


    <br /><br />
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Description</h5>
            <p class="card-text">@locationservice.GetLocations().First(x => x.Id == locationid).Description</p>
        </div>
    </div>
    <br />
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Notes</h5>
            <p class="card-text">@locationservice.GetLocations().First(x => x.Id == locationid).Notes</p>
        </div>
    </div>
    <br />
    <br />

    <button class="btn btn-primary" @onclick="OpenLocInMaps">Open Location in Google Maps</button>
    <br />
    <br />
 
    <div class="container" style="justify-content:center">
        <div class="row" style="justify-content:center">
            @for(int i=1; i < weather.forecast.Count(); i++)
            {
                if (i == 4)
                {
                    break;
                }
                <div class="col-3">
                    <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@today.AddDays(i).DayOfWeek</h5>
                        <p class="card-text" style="font-size: xxx-large;">@weather.forecast[i].icon</p>
                        <p class="card-text">@weather.forecast[i].high°F / @weather.forecast[i].low°F</p>
                        <p class="card-text">@weather.forecast[i].description</p>
                    </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <br /><br />

    <AuthorizeView>
        <Authorized>
            @if (AddImage)
            {
<p>
    <label>
        Add an Image:
        <InputFile OnChange="@LoadFiles" class="form-label" for="file" style="width:200px; font-size:small" /><br /><br />
        <button class="btn btn-secondary form-control" id="file" @onclick="UploadImage">Upload Image To Location</button> <br /><br />
        <button class="btn btn-secondary form-control" id="file" @onclick="UploadStory">Upload Image As Story</button>
    </label>
</p>

                    <p>@exceptionMessage</p>

                                        @if (isLoading)
                                        {
                    <p>Loading...</p>} }
                                    else
                                    {
                    <button class="btn btn-secondary" @onclick="showAddImage">Add an Image</button><br /><br />}
        </Authorized>
    </AuthorizeView>

    @for (int i = 0; i < 5; i++)
    {
        if (i < rating)
        {
<span class="fa fa-star checked"></span> }
else
{
<span class="fa fa-star"></span>}
}
    <label> @numratings ratings</label>
    <br />
    <AuthorizeView>
        <Authorized>
            <!-- Button trigger modal -->
            @if (locationservice.GetReviews(locationid).Exists(x => x.Author == currentuser))
            {
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
    Change your review
</button> }
else
{
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
    Add a Review
</button>}


            <!-- Modal -->
            <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLongTitle">Add a Review</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>Rating</p>
                            <div class="rating">
                                <input type="radio" name="rating" value="5" id="5"><label for="5" @onclick="(e => review.Rating = 5)">☆</label>
                                <input type="radio" name="rating" value="4" id="4"><label for="4" @onclick="(e => review.Rating = 4)">☆</label>
                                <input type="radio" name="rating" value="3" id="3"><label for="3" @onclick="(e => review.Rating = 3)">☆</label>
                                <input type="radio" name="rating" value="2" id="2"><label for="2" @onclick="(e => review.Rating = 2)">☆</label>
                                <input type="radio" name="rating" value="1" id="1"><label for="1" @onclick="(e => review.Rating = 1)">☆</label>
                            </div>
                            <p>Review (Optional)</p>
                            <div class="input-group">
                                <textarea maxlength="140" class="form-control" @bind="review.ReviewText"></textarea>
                            </div>
                        </div>
                        <form class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary" data-dismiss="modal" @onclick="addReview">Submit</button>
                        </form>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div>To add a review <a href="/Identity/Account/Register">Make an Account</a> or <a href="/Identity/Account/Login">Login</a></div>
        </NotAuthorized>
    </AuthorizeView>
    <br />
    <br />
    <p>
        Posted By: @locationservice.GetLocations().First(x => x.Id == locationid).Author
    </p>
    <br />
    <h3>Reviews</h3>
    @foreach (Review rev in locationservice.GetReviews(locationid))
    {
        if (rev.ReviewText == string.Empty)
        {
            continue;
        }
<div class="card" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">@rev.Author</h5>
        @for (int i = 0; i < 5; i++)
        {
            if (i < rev.Rating)
            {
<span class="fa fa-star checked"></span> }
else
{
<span class="fa fa-star"></span>}
}
        <p class="card-text">@rev.ReviewText</p>
    </div>
</div>
                <br />}

</center>

@code { [Parameter]
    public Guid locationid { get; set; }

    public int numratings { get; set; }
    public string currentuser { get; set; }
    public int rating { get; set; }
    public Review review = new Review();
    List<byte[]> images = new List<byte[]>();
    byte[] barray;
    bool AddImage = false;
    List<Image> storyImgs = new List<Image>();
    Location modalLoc = new Location();
    public Weather weather = new Weather();

    DateTime today = DateTime.Today;


    public void showStory(Guid locId)
    {
        modalLoc = locationservice.getLocation(locId);
        storyImgs = imageService.getStories().Where(x => x.locationId == modalLoc.Id).ToList();
    }

    public void showAddImage()
    {
        AddImage = !AddImage;
    }

    public void UploadStory()
    {
        if (barray != null)
        {
            imageService.AddStory(locationid, currentuser, barray);
            images = imageService.getImages(locationid);
            barray = null;
            showAddImage();
            NavManager.NavigateTo("/Location/" + locationid, forceLoad: true);
        }
    }

    public async Task OpenLocInMaps()
    {
        string lat = locationservice.GetLocations().First(x => x.Id == locationid).Coords.Item1.ToString();
        string lon = locationservice.GetLocations().First(x => x.Id == locationid).Coords.Item2.ToString();
        string url = "https://www.google.com/maps/search/?api=1&query=" + lat + "," + lon;
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
        weather = await weatherService.GetWeather(locationservice.getLocation(locationid));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetRatings();
        images = imageService.getImages(locationid);
    }

    public void GetRatings()
    {
        rating = locationservice.GetRating(locationid).Item1;
        numratings = locationservice.GetRating(locationid).Item2;
    }

    private async Task GetCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentuser = user.Identity.Name;
    }

    public void addReview()
    {
        review.Author = currentuser;
        review.LocationId = locationid;
        locationservice.AddReview(review);
        GetRatings();
    }

    private Dictionary<IBrowserFile, string> loadedFiles =
        new Dictionary<IBrowserFile, string>();
    private long maxFileSize = 524288000000000;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    string exceptionMessage;

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        exceptionMessage = string.Empty;

        try
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                using var reader =
                    new StreamReader(file.OpenReadStream(maxFileSize));
                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);
                    barray = memoryStream.ToArray();
                }
            }
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }

        isLoading = false;
    }

    public void UploadImage()
    {
        if (barray != null)
        {
            imageService.AddImage(locationid, currentuser, barray);
            images = imageService.getImages(locationid);
            barray = null;
            showAddImage();
            NavManager.NavigateTo("/Location/" + locationid, forceLoad: true);
        }
    }
}
